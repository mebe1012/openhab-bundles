# binding

binding.mqtt.name = MQTT Binding
binding.mqtt.description = Allows management of MQTT broker connections and linking of MQTT topics to Things and Channels

# thing types

thing-type.mqtt.broker.label = MQTT Broker
thing-type.mqtt.broker.description = A connection to a MQTT broker
thing-type.mqtt.systemBroker.label = System MQTT Broker
thing-type.mqtt.systemBroker.description = A system configured and therefore read-only broker connection. Properties are reflecting the configuration and internal connection status.

# thing types config

thing-type.config.mqtt.broker.certificate.label = Certificate Hash
thing-type.config.mqtt.broker.certificate.description = If **certificatepin** is set this hash is used to verify the connection. Clear to allow a new certificate pinning on the next connection attempt. If empty will be filled automatically by the next successful connection. An example input would be `SHA-256:83F9171E06A313118889F7D79302BD1B7A2042EE0CFD029ABF8DD06FFA6CD9D3`.
thing-type.config.mqtt.broker.certificatepin.label = Certificate Pinning
thing-type.config.mqtt.broker.certificatepin.description = If this and SSL is set: After the next connection has been successfully established, the certificate is pinned. The connection will be refused if another certificate is used. Clear **certificate** to allow a new certificate for the next connection attempt. This option can increase security.
thing-type.config.mqtt.broker.clientID.label = Client ID
thing-type.config.mqtt.broker.clientID.description = Use a fixed client ID. Defaults to empty which means a client ID is generated for this connection.
thing-type.config.mqtt.broker.enableDiscovery.label = Enable Discovery
thing-type.config.mqtt.broker.enableDiscovery.description = If set to true enables this broker for all discovery services.
thing-type.config.mqtt.broker.host.label = Broker Hostname/IP
thing-type.config.mqtt.broker.host.description = The IP/Hostname of the MQTT broker
thing-type.config.mqtt.broker.keepAlive.label = Heartbeat
thing-type.config.mqtt.broker.keepAlive.description = Keep alive / heartbeat timer in s. It can take up to this time to determine if a server connection is lost. A lower value may keep the broker unnecessarily busy for no or little additional value.
thing-type.config.mqtt.broker.lwtMessage.label = Last Will Message
thing-type.config.mqtt.broker.lwtMessage.description = The last will message.
thing-type.config.mqtt.broker.lwtQos.label = Last Will QoS
thing-type.config.mqtt.broker.lwtQos.description = The quality of service parameter of the last will.
thing-type.config.mqtt.broker.lwtQos.option.0 = At most once (0)
thing-type.config.mqtt.broker.lwtQos.option.1 = At least once (1)
thing-type.config.mqtt.broker.lwtQos.option.2 = Exactly once (2)
thing-type.config.mqtt.broker.lwtRetain.label = Last Will Retain
thing-type.config.mqtt.broker.lwtRetain.description = True if last Will should be retained (defaults to false)
thing-type.config.mqtt.broker.lwtTopic.label = Last Will Topic
thing-type.config.mqtt.broker.lwtTopic.description = Defaults to empty and therefore disables the last will.
thing-type.config.mqtt.broker.password.label = Password
thing-type.config.mqtt.broker.password.description = The MQTT password
thing-type.config.mqtt.broker.port.label = Broker Port
thing-type.config.mqtt.broker.port.description = The port is optional, if none is provided, the typical ports 1883 and 8883 (SSL) are used.
thing-type.config.mqtt.broker.publickey.label = Public Key Hash
thing-type.config.mqtt.broker.publickey.description = If **publickeypin** is set this hash is used to verify the connection. Clear to allow a new public key pinning on the next connection attempt. If empty will be filled automatically by the next successful connection. An example input would be `SHA-256:83F9171E06A313118889F7D79302BD1B7A2042EE0CFD029ABF8DD06FFA6CD9D3`
thing-type.config.mqtt.broker.publickeypin.label = Public Key Pinning
thing-type.config.mqtt.broker.publickeypin.description = If this and SSL is set: After the next connection has been successfully established, the public key of the broker is pinned. The connection will be refused if another public key is used. Clear **publickey** to allow a new public key for the next connection attempt. This option can increase security.
thing-type.config.mqtt.broker.qos.label = Quality of Service
thing-type.config.mqtt.broker.qos.option.0 = At most once (0)
thing-type.config.mqtt.broker.qos.option.1 = At least once (1)
thing-type.config.mqtt.broker.qos.option.2 = Exactly once (2)
thing-type.config.mqtt.broker.reconnectTime.label = Reconnect Time
thing-type.config.mqtt.broker.reconnectTime.description = Reconnect time in ms. If a connection is lost, the binding will wait this time before it tries to reconnect.
thing-type.config.mqtt.broker.secure.label = Secure Connection
thing-type.config.mqtt.broker.secure.description = Uses TLS/SSL to establish a secure connection to the broker.
thing-type.config.mqtt.broker.username.label = Username
thing-type.config.mqtt.broker.username.description = The MQTT username
thing-type.config.mqtt.systemBroker.brokerid.label = Broker ID
thing-type.config.mqtt.systemBroker.brokerid.description = Each system wide configured MQTT broker has a unique broker ID.
thing-type.config.mqtt.systemBroker.enableDiscovery.label = Enable Discovery
thing-type.config.mqtt.systemBroker.enableDiscovery.description = If set to true enables this broker for all discovery services.

# channel types

channel-type.mqtt.publishTrigger.label = Publish Trigger
channel-type.mqtt.publishTrigger.description = This channel is triggered when a value is published to the configured MQTT topic on this broker connection. The event payload will be the received MQTT topic value.

# channel types config

channel-type.config.mqtt.publishTrigger.payload.label = Payload Condition
channel-type.config.mqtt.publishTrigger.payload.description = An optional condition on the value of the MQTT topic that must match before this channel is triggered.
channel-type.config.mqtt.publishTrigger.separator.label = Separator Character
channel-type.config.mqtt.publishTrigger.separator.description = The trigger channel payload usually only contains the received MQTT topic value. If you define a separator character, for example '#', the topic and received value will be in the trigger channel payload. For example: my_topic#my_received_value.
channel-type.config.mqtt.publishTrigger.stateTopic.label = MQTT Topic
channel-type.config.mqtt.publishTrigger.stateTopic.description = This channel will trigger on this MQTT topic. This topic can contain wildcards like + and # for example "all/in/#" or "sensors/+/config".

actionInputTopicLabel = MQTT Topic
actionInputTopicDesc = The topic to publish a value to.
actionInputValueLabel = Value
actionInputValueDesc = The value to publish
actionInputRetainLabel = Retain
actionInputRetainDesc = Retain message
actionLabel = publish an MQTT message
actionDesc = Publishes a value to the given MQTT topic.
offline.notextualconfig = The system connection with the name {0} doesn't exist anymore.
offline.dyninsteadoftextual = A binding owned connection was found instead of a system connection for the broker name: {0}.
offline.textualinsteadofdny = A system connection was found instead of a dynamic connection for the broker name: {0}.
offline.sharedremoved = Another binding unexpectedly removed the internal broker connection.
